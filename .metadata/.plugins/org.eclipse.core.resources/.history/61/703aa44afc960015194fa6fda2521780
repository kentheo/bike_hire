/**
 * 
 */
package bikescheme;

import java.util.logging.Logger;

/**
 *  
 * Docking Point for a Docking Station.
 * 
 * @author pbj
 *
 */
public class DPoint implements KeyInsertionObserver, BikeDockingObserver, FaultBssuttonObserver {
    public static final Logger logger = Logger.getLogger("bikescheme");

    private DStation parentStation;
    private KeyReader keyReader; 
    private OKLight okLight;
    private String instanceName;
    private BikeSensor bikeSensor;
    private BikeLock bikeLock;
    private FaultLight faultLight;
    private FaultButton faultButton;
    private int index;
    private boolean hasBike;
    private Bike currentBike;
 
    /**
     * 
     * Construct a Docking Point object with key reader, green ok light,
     * bike sensor, bike lock, fault light and fault button interface devices.
     * 
     * @param instanceName a globally unique name
     * @param index of reference to this docking point in owning DStation's
     *  list of its docking points.
     */
    
    public DPoint(DStation station, String instanceName, int index) {

     // Construct and make connections with interface devices
        
        keyReader = new KeyReader(instanceName + ".kr");
        keyReader.setObserver(this);
        okLight = new OKLight(instanceName + ".ok");
        bikeLock = new BikeLock(instanceName + ".bl");
        bikeSensor = new BikeSensor(instanceName + ".bs");
        bikeSensor.setObserver(this);
        faultLight = new FaultLight(instanceName + ".fl");
        faultButton = new FaultButton(instanceName + ".fb");
        //faultButton.setObserver(this);
        
        this.parentStation = station;
        this.instanceName = instanceName;
        this.index = index;
    }
       
    public void setDistributor(EventDistributor d) {
        keyReader.addDistributorLinks(d); 
        bikeSensor.addDistributorLinks(d);
        faultButton.addDistributorLinks(d);
    }
    
    public void setCollector(EventCollector c) {
        okLight.setCollector(c);
        bikeLock.setCollector(c);
        faultLight.setCollector(c);
        
    }
    
    public String getInstanceName() {
        return instanceName;
    }
    
    public int getIndex() {
        return index;
    }
    
    /** 
     * Implementation of docking point functionality on key insertion.
     * 
     */
    
    public void keyInserted(String keyID) {
        logger.fine(getInstanceName());
        
        if (hasBike){ //if the docking point has a bike
            if (parentStation.getHub().canHire(keyID)){
                parentStation.startBikeHire(keyID, currentBike);
                okLight.flash();
                bikeLock.unlock();
                hasBike = false;
            }
        }
        
        else{
        	parentStation.noBikeError();
        }
    }
    
    public void bikeDocked(String bikeID){
    	logger.fine(getInstanceName());
    	
    	parentStation.bikeDocked(bikeID);
    	this.currentBike = parentStation.getHub().identifyBike(bikeID);
    	this.hasBike = true;
    	okLight.flash();
    	bikeLock.lock();
    }

    public void buttonPressed() {
        logger.fine(getInstanceName());
        
        faultLight.flash();
    }

    public Bike getCurrentBike() {
        return currentBike;
    }

    public void setCurrentBike(Bike bike) {
        this.currentBike = bike;
    }
    
    public boolean hasBike(){
    	return this.hasBike;
    }

	@Override
	public void noBikeError() {
		
	}
    
 

}